# PACKAGES
library(dplyr)
library(ggplot2)
library(rsconnect)
library(shiny)

#Connecting to Shinyapps.io
rsconnect::setAccountInfo(name='*', token='*', secret='*')
#rsconnect::deployApp('WomenOfBiathlon')

# LOADING DATA
# The data is created with a R code file called BiathlonAPI.R
# Assuming that has run, we're bringing in the created data sources here:

Biosr <- read.csv("Bios.csv", colClasses = c("FullName"="character", "PhotoURI"="character", "FlagURI"="character"),header = TRUE)
Bios <- Biosr[,2:30]
BiosStatsSkiVr <- read.csv("BiosStatsSkiV.csv", header = TRUE)
BiosStatsSkiV <- BiosStatsSkiVr[,2:5] # removing the first column that got added by R
BiosStatsShootVr <- read.csv("BiosStatsShootV.csv", header = TRUE)
BiosStatsShootV <- BiosStatsShootVr[,2:5] # removing the first column that got added by R
BiosStatsProneVr <- read.csv("BiosStatsProneV.csv", header = TRUE)
BiosStatsProneV <- BiosStatsProneVr[,2:5] # removing the first column that got added by R
BiosStatsStandVr <- read.csv("BiosStatsStandV.csv", header = TRUE)
BiosStatsStandV <- BiosStatsStandVr[,2:5] # removing the first column that got added by R
BiosStatsShootingTtlProStaV <- read.csv("BiosStatsShootingTtlProStaV.csv", header = TRUE)
BiosStatsShootingTtlProStaV <- BiosStatsShootingTtlProStaV[,2:7]# removing the first column that got added by R
BiosStatsShootingTtlProStaV$FullName <- as.character(BiosStatsShootingTtlProStaV$FullName) # Convert FullName to character

# LOADING PERSONALIZED THEME
theme_IBU <- function() {
    theme_minimal() + 
        theme(
            # General elements
            text = element_text(family = "Helvetica", face = "plain", color = "white"),
            # Plot elements
            plot.title = element_text(size = 18, colour = "#CFDC08", face = "bold", hjust = 0.5),
            plot.background = element_rect(fill = "#063247", colour = NA),
            # Panel elements
            panel.background = element_blank(),
            panel.grid.minor = element_blank(),
            panel.grid.major = element_line(colour = "gray75", size = 0.2),
            # Axis elements
            axis.title = element_text(size = 14),
            axis.text = element_text(size = 12, colour = "white"),
            axis.line = element_blank(),
            axis.ticks = element_blank(),
            # Legend elements
            legend.background = element_blank(),
            legend.key = element_blank(),
            legend.box.background = element_blank(),
            legend.text = element_text(family = "Helvetica-Narrow", size = 10, colour = "white")
        )
}

# USER INTERFACE
ui = fluidPage(
    style="background-color:#063247", #This sets the background color of the app's fluidpage area (which is whole)
    tags$h1("Women of Biathlon",style="color:white"),
    tags$h3("A tool for exploring the female biathlon athletes bios and their stats", style="color:#CFDC08"),

    fluidRow(
    sidebarPanel(
        width = 4,
        selectizeInput(inputId = 'var1', label='Select an athlete below:', choices = c("click to see list; type name to filter" = "", as.character(Bios$FullName)), multiple = FALSE,  selected = "Denise HERRMANN")
        , "After you select an athlete, it will show a few tables and a picture on the right"
        , br()
        , br()
        #, textOutput("address1") 
        , "Nation's flag"
        , htmlOutput("inc2")
        , htmlOutput("inc")
        ,fluidRow(
            tableOutput("table1"),
            tags$hr()
        )
    ),
    
    # This puts all the objects on the page in the main panel
    mainPanel(
        width = 8,
        fluidRow(
                column(4,plotOutput("plotski")),
                column(4,plotOutput("plotski2"))
        ),
        tags$hr(style="color:#CFDC08"),
        fluidRow(
                column(4,plotOutput("plotski3")),
                column(4,plotOutput("plotski4"))
        ),style="color:white"
    ),
    ),
    tags$hr(),
#    tags$hr(),
    
    fluidRow(
        column(3, "This last chart shows the three shooting charts, Prone, Combined (total) and Standing combined in one:"),
        column(4, plotOutput("plotski5"))
        ,style="color:white"),
    fluidRow()
    ,
    fluidRow(
        tags$p("All data is from the ", tags$a(href="https://biathlonresults.com/", "IBU's Biathlon Result website")
        ,style="color:white")
    )
)


# SERVER SIDE
server = function(input, output, session) {
    
    # Show a table with the desired fields for the selected athlete  
    tab <- reactive({
        Bios[1:143,c(1,2,5,8)] %>%
            filter(as.character(FullName) == as.character(input$var1)) #%>% 
        #filter(NAT == input$var2) %>% 
        #filter(Age == input$var3)
    })
    
    # Get the photo url for the selected athlete  
    address <- reactive({
        Bios %>% select(2,12) %>%  
            filter(as.character(FullName) == as.character(input$var1)) %>% select(2)
    }) 
    
    # Get the flag url for the selected athlete
    flag <- reactive({
        Bios %>% select(2,13) %>%  
            filter(as.character(FullName) == input$var1) %>% select(2)
    }) 
    
    # Get the picture of the selected athlete (like "https://ibu.blob.core.windows.net/docs/athletes/BTGER21103199401.png")
    getPage <- function() {
        return(tags$iframe(src = as.character(address())
                           , style="width:100%;",  frameborder="0"
                           ,id="iframe"
                           , height = "500px"))
    }
    
    # Get the flag picture for the selected athlete (like "https://info.blob.core.windows.net/resources/bt/flags/ger.png")     
    getPage2 <- function() {
        return(tags$iframe(src = flag () 
                           , style="width:30%;",  frameborder="0"
                           ,id="iframe"
                           , height = "50px"))
    }
    
    # Get the skiing statistics data for only the selected athlete
    skierstats <- reactive({
        BiosStatsSkiV %>% 
            filter(FullName == input$var1)
    })
    # Get the shooting statistics data for only the selected athlete
    shootingstats <- reactive({
        BiosStatsShootV %>% 
            filter(FullName == input$var1)
    })
    # Get the prone shooting statistics data for only the selected athlete
    pronestats <- reactive({
        BiosStatsProneV %>% 
            filter(FullName == input$var1)
    })
    # Get the standing shooting statistics data for only the selected athlete
    standingstats <- reactive({
        BiosStatsStandV %>% 
            filter(FullName == input$var1)
    })
    # Get the three-in-one shooting statistics data for only the selected athlete
    shootingcombostats <- reactive({
        BiosStatsShootingTtlProStaV %>% 
            filter(FullName == input$var1)
    })

    # Render the table for tab    
    output$table1 <- renderTable({
        tab()
    })
    # Render the iframe for getPage (athlete picture)   
    output$inc <- renderUI({
        x <- input$var1  
        getPage()
    })
    # Render the iframe for getPage2 (athlete's nation flag)   
    output$inc2 <- renderUI({
        x <- input$var1  
        getPage2()
    })
    # Render the record for address   
    output$address1 <- renderPrint({
        address()
    })
    
    #output$chart1
    
    theme_set(theme_IBU()) # This calls the theme_IBU() function, which changes the theme_minimal to look more like the IBUsite. If it's not there, run the BiathlonTheme.r script
    
    output$plotski <-renderPlot({
        ggplot(data = skierstats(), mapping = aes(x=variable ,y=value, group=FullName, size = 0.2)) +
            ggtitle("Skiing Performance") +
            scale_x_discrete(limits=c("StatSkiing1617", "StatSkiing1718", "StatSkiing1819", "StatSkiing1920"), labels=c("1617","1718","1819","1920"))+
            geom_path(colour = "#0097c9", show.legend=FALSE)+
            geom_point(colour = "#CFDC08", alpha = 0.5, show.legend=FALSE)+
            geom_hline(yintercept=0, linetype="solid", color = "white", size = 3, alpha = 0.35)+
            geom_hline(yintercept =5, color="#1F2D40")+
            geom_hline(yintercept =-5, color="#044740")+
            annotate(geom="text", x = 2, y=9.5, label="Slower than average", color="#998E95")+
            annotate(geom="text", x = 2, y=-9.5, label="Faster than average", color="#CFDC0B")+
            annotate("rect", ymin = 0, ymax = -10, xmin = "StatSkiing1617", xmax = "StatSkiing1920", alpha=.1, fill="green")+
            annotate("rect", ymin = 0, ymax = 10, xmin = "StatSkiing1617", xmax = "StatSkiing1920", alpha=.1, fill="red")+
            #theme(panel.background=element_rect(fill = "#063247",colour = NA),
            #    plot.background = element_rect(fill = "#063247", colour = NA))+
            ylim(10,-10)+
            labs(x= "Season", y = "Relative skispeed to average")
    })
    
    #outputchart2
    output$plotski2 <- renderPlot({
        ggplot(data = shootingstats(), mapping = aes(x=variable ,y=value, group=FullName, size = 0.5)) +
            ggtitle("Combined Shooting Performance") +
            scale_x_discrete(limits=c("StatShooting1617", "StatShooting1718", "StatShooting1819", "StatShooting1920"), labels=c("1617","1718","1819","1920"))+
            geom_path(color = "#0097c9",show.legend=FALSE)+
            geom_point(colour = "#CFDC08", alpha = 0.5, show.legend=FALSE)+
            geom_hline(yintercept=0, linetype="dashed", color = "blue", labels("avg."))+
            #theme(panel.background=element_rect(fill = "#063247", color = "#063247"),
            #    plot.background = element_rect(fill = "#063247", color = "#063247"))+
            ylim(50,100)+
            labs(x= "Season", y = "Shooting % (combined)")
    })
    
    #outputchart3
    output$plotski3 <- renderPlot({
        ggplot(data = pronestats(), mapping = aes(x=variable ,y=value, group=FullName, size = 1)) +
            ggtitle("Prone Shooting Performance") +
            scale_x_discrete(limits=c("StatShootingProne1617", "StatShootingProne1718", "StatShootingProne1819", "StatShootingProne1920"), labels=c("1617","1718","1819","1920"))+
            geom_path(color = "#0097c9",show.legend=FALSE)+
            geom_point(colour = "#CFDC08", alpha = 0.5, show.legend=FALSE)+
            geom_hline(yintercept=0, linetype="dashed", color = "blue", labels("avg."))+
            #theme(panel.background=element_rect(fill = "#063247", color = "#063247"))+
            #theme(plot.background = element_rect(fill = "#063247", color = "#063247"))+
            ylim(50,100)+
            labs(x= "Season", y = "Shooting % Prone")
    })
    
    #outputchart4
    output$plotski4 <- renderPlot({
        ggplot(data = standingstats(), mapping = aes(x=variable ,y=value, group=FullName, size = 1)) +
            ggtitle("Standing Shooting Performance") +
            scale_x_discrete(limits=c("StatShootingStanding1617", "StatShootingStanding1718", "StatShootingStanding1819", "StatShootingStanding1920"), labels=c("1617","1718","1819","1920"))+
            geom_path(color = "#0097c9",show.legend=FALSE)+
            geom_point(colour = "#CFDC08", alpha = 0.5, show.legend=FALSE)+
            geom_hline(yintercept=0, linetype="dashed", color = "blue", labels("avg."))+
            #theme(panel.background=element_rect(fill = "#063247", color = "#063247"))+
            #theme(plot.background = element_rect(fill = "#063247", color = "#063247"))+
            ylim(50,100)+
            labs(x= "Season", y = "Shooting % Standing")
    })
    
    #outputchart5
    output$plotski5 <- renderPlot({
        ggplot(data = shootingcombostats(), aes(x = as.character(season), group=FullName)) + 
            #adding lines
            geom_line(lineend="round",color="#009CD9",aes(y = ShootTTL,colour = "Total", linetype = "solid", size=1.04, alpha=0.4)) + 
            geom_line(lineend="round",color="#D8E935",aes(y = ShootPRO,colour = "Prone", linetype = "solid", size=1.005, alpha=0.4)) +
            geom_line(lineend="round",color="#A2BF15",aes(y = ShootSTA,colour = "Standing", linetype = "solid", size=1.005, alpha=0.4))+
            #adding points
            geom_point(color="#009CD9",aes(y = ShootTTL,colour = "Total", size=1.04, alpha=0.4)) + 
            geom_point(color="#D8E935",aes(y = ShootPRO,colour = "Prone", size=1, alpha=0.4)) +
            geom_point(color="#A2BF15",aes(y = ShootSTA,colour = "Standing", size=1, alpha=0.4))+
            #background them
            #theme(panel.background=element_rect(fill = "#063247", color = "#063247"))+
            #theme(plot.background = element_rect(fill = "#063247", color = "#063247"))+
            geom_text(colour = "white", aes(x=as.character(season), y=ShootTTL, label=ShootTTL, size=1.02))+
            geom_text(colour = "white", aes(x=as.character(season), y=ShootPRO, label=ShootPRO, size=1.01))+
            geom_text(colour = "white", aes(x=as.character(season), y=ShootSTA, label=ShootSTA, size=1.01))+
            geom_text(color="#009CD9", aes(x=as.character(season), y=ShootTTL, label=ifelse(as.character(season) == "1920", "Total",""), size=1.02, hjust = -0.25))+
            geom_text(color="#D8E935", aes(x=as.character(season), y=ShootPRO, label=ifelse(as.character(season) == "1920", "Prone",""), size=1.02, hjust = -0.25))+
            geom_text(color="#A2BF15", aes(x=as.character(season), y=ShootSTA, label=ifelse(as.character(season) == "1920", "Standing",""), size=1.02, hjust = -0.25))+
            guides(size=FALSE)+
            guides(alpha=FALSE)+
            guides(linetype=FALSE)+
            labs(x= "Season", y = "Shooting %")
    })
}

# SHINY MAGIC
shinyApp(ui = ui, server = server) # this launches your app
