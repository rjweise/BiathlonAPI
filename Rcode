#Turn on required packages
library(rjson)
library(tidyverse)
library(httr)
library(jsonlite)
library(tidyr)
library(purrr)
library(ggplot2)

#########################################################################

# GET A LIST OF ALL ATHLETES for a season
Athletes1920W <- GET("http://biathlonresults.com/modules/sportapi/api/Stats?StatisticId=SHOOT_W_A&StatId=SHOOTWC&byWhat=ATH&SeasonId=1920&OrganizerId=&GenderId=W&IBUId=&Nat=")
Athletes1920W_text <- content(Athletes1920W, "text")
Athletes1920W_json <- fromJSON(Athletes1920W_text, flatten = TRUE)
Athletes1920W_df <- as.data.frame(Athletes1920W_json)
W1920_IBUlist <- as.data.frame(Athletes1920W_df$Rows.IBUId ) # This is a final list of all IBU ID's for all Women athletes in the 2019-2020 season
NrofRows <- nrow(W1920_IBUlist) # This just counts the number of records / athletes

#########################################################################

# PREP THE DATA FRAME TO STORE DATA
#Read one Json file for the Athlete Bio headers
jsonfileHEA <- rjson::fromJSON(file = "http://biathlonresults.com/modules/sportapi/api/CISBios?IBUId=BTGER21103199401")

#create an empty data frame with headers
Bios <- data.frame(matrix(ncol = 29, ))  #add nrow=NrofRows for "y" if you want to create the exact nr of rows as athletes
#get the header names from the jsonfileHEA
#first 15 headers
colheads1_4 <-c(names(jsonfileHEA[1:4]))
colheads7_15 <-c(names(jsonfileHEA[7:15]))
#skiing performance headers
colheads_skiing <-c(names(jsonfileHEA[35]))
season1 <- c(purrr::flatten(jsonfileHEA[31])[1])
season2 <- c(purrr::flatten(jsonfileHEA[31])[2])
season3 <- c(purrr::flatten(jsonfileHEA[31])[3])
season4 <- c(purrr::flatten(jsonfileHEA[31])[4])
colheads_skiing1 = paste(colheads_skiing,season1, sep = "")
colheads_skiing2 = paste(colheads_skiing,season2, sep = "")
colheads_skiing3 = paste(colheads_skiing,season3, sep = "")
colheads_skiing4 = paste(colheads_skiing,season4, sep = "")
#shooting performance headers
colheads_shooting <- c(names(jsonfileHEA[32]))
colheads_shooting1 = paste(colheads_shooting,season1, sep = "")
colheads_shooting2 = paste(colheads_shooting,season2, sep = "")
colheads_shooting3 = paste(colheads_shooting,season3, sep = "")
colheads_shooting4 = paste(colheads_shooting,season4, sep = "")
#shootingstanding performance headers
colheads_shootingS <- c(names(jsonfileHEA[33]))
colheads_shootingS1 = paste(colheads_shootingS,season1, sep = "")
colheads_shootingS2 = paste(colheads_shootingS,season2, sep = "")
colheads_shootingS3 = paste(colheads_shootingS,season3, sep = "")
colheads_shootingS4 = paste(colheads_shootingS,season4, sep = "")
#shootingprone performance headers
colheads_shootingP <- c(names(jsonfileHEA[34]))
colheads_shootingP1 = paste(colheads_shootingP,season1, sep = "")
colheads_shootingP2 = paste(colheads_shootingP,season2, sep = "")
colheads_shootingP3 = paste(colheads_shootingP,season3, sep = "")
colheads_shootingP4 = paste(colheads_shootingP,season4, sep = "")

#combine all column headers
colheads_all <- c(colheads1_4,colheads7_15,colheads_skiing1,colheads_skiing2,colheads_skiing3,colheads_skiing4, 
                  colheads_shooting1,colheads_shooting2,colheads_shooting3,colheads_shooting4, 
                  colheads_shootingS1,colheads_shootingS2,colheads_shootingS3,colheads_shootingS4,
                  colheads_shootingP1,colheads_shootingP2,colheads_shootingP3,colheads_shootingP4)

#remove the non-standard characters
colheads_all <- gsub("/","",colheads_all)

#Create a data frame to store records for all athletes
#BiosDF <- as.data.frame(Bios)

#name columns in dataframe based on colheads_all
colnames(Bios) <- colheads_all

#colnames(BiosDF) <- colheads_all


#########################################################################

#THIS IS THE START OF LOOP 1

#1.1 Read IBUId from Athlete list
index <- 1
# Set base URL for the Bios
AthBioBase <- "http://biathlonresults.com/modules/sportapi/api/CISBios?IBUId="
#Loop through the IBUids one by one
for (row in 1:NrofRows) {   #using 5 for testing, replace with nrow(W1920_IBUlist) for full list
  #read IBU ID
  #row <- 5
  IBUid <- W1920_IBUlist[row,1]
  #create the full URL
  AthBioCall <- paste(AthBioBase, IBUid, sep="")  
  #1.2 Read the Json file for the Athlete based on IBUId
  jsonfile <- rjson::fromJSON(file = AthBioCall)
  #test print(AthBioCall)
  
  #1.3 Get the values for the selected Athlete 
  values <- c(jsonfile[1:4],jsonfile[7:15],
              (purrr::flatten(jsonfile[35])[1]),(purrr::flatten(jsonfile[35])[2]),(purrr::flatten(jsonfile[35])[3]),(purrr::flatten(jsonfile[35])[4]),
              (purrr::flatten(jsonfile[32])[1]),(purrr::flatten(jsonfile[32])[2]),(purrr::flatten(jsonfile[32])[3]),(purrr::flatten(jsonfile[32])[4]),
              (purrr::flatten(jsonfile[33])[1]),(purrr::flatten(jsonfile[33])[2]),(purrr::flatten(jsonfile[33])[3]),(purrr::flatten(jsonfile[33])[4]),
              (purrr::flatten(jsonfile[34])[1]),(purrr::flatten(jsonfile[34])[2]),(purrr::flatten(jsonfile[34])[3]),(purrr::flatten(jsonfile[34])[4])
  )
  
  #convert values list to dataframe
  ValuesDF <-data.frame(matrix(unlist(values),nrow=length(values),byrow = F))
  ValuesDF2 <- do.call(rbind.data.frame,values)
  #1.4 Add the values into new row
  
  Bios[index,] = values
  
  #BiosDF <- rbind(BiosDF,values)
  #add new row
  
  #BiosDF[nrow(BiosDF) + 1,]
  
  print(index)  
  #Go to next IBUid until done
  index <- index+1
}

write.csv(Bios,"BiathlonBios.csv", row.names = TRUE)


# creating data subsets for further analysis )

#create subset with ski and shooting statistics for 2019-2020
BiosStats1920 <- Bios[,c(1,2,14,18,22,26)]

#clean % symbols
BiosStats1920[,3] <- parse_number(BiosStats1920[,c(3)])
BiosStats1920[,4] <- parse_number(BiosStats1920[,c(4)])
BiosStats1920[,5] <- parse_number(BiosStats1920[,c(5)])
BiosStats1920[,6] <- parse_number(BiosStats1920[,c(6)])

#create subset with skiing stats for 2016-2017 to 2019-2020
BiosStatsSki <- Bios[,c(1,2,14,15,16,17)]
#clean % symbols
BiosStatsSki[,3] <- parse_number(BiosStatsSki[,c(3)])
BiosStatsSki[,4] <- parse_number(BiosStatsSki[,c(4)])
BiosStatsSki[,5] <- parse_number(BiosStatsSki[,c(5)])
BiosStatsSki[,6] <- parse_number(BiosStatsSki[,c(6)])

#create subset with shooting stats for 2016-2017 to 2019-2020
BiosStatsShoot <- Bios[,c(1,2,18,19,20,21)]
#clean % symbols
BiosStatsShoot[,3] <- parse_number(BiosStatsShoot[,c(3)])
BiosStatsShoot[,4] <- parse_number(BiosStatsShoot[,c(4)])
BiosStatsShoot[,5] <- parse_number(BiosStatsShoot[,c(5)])
BiosStatsShoot[,6] <- parse_number(BiosStatsShoot[,c(6)])

#create subset with standing shooting stats for 2016-2017 to 2019-2020
BiosStatsStand <- Bios[,c(1,2,26,27,28,29)]
#clean % symbols
BiosStatsStand[,3] <- parse_number(BiosStatsStand[,c(3)])
BiosStatsStand[,4] <- parse_number(BiosStatsStand[,c(4)])
BiosStatsStand[,5] <- parse_number(BiosStatsStand[,c(5)])
BiosStatsStand[,6] <- parse_number(BiosStatsStand[,c(6)])

#create subset with prone shooting stats for 2016-2017 to 2019-2020
BiosStatsProne <- Bios[,c(1,2,22,23,24,25)]
#clean % symbols
BiosStatsProne[,3] <- parse_number(BiosStatsProne[,c(3)])
BiosStatsProne[,4] <- parse_number(BiosStatsProne[,c(4)])
BiosStatsProne[,5] <- parse_number(BiosStatsProne[,c(5)])
BiosStatsProne[,6] <- parse_number(BiosStatsProne[,c(6)])

#reshaping (pivot) the data to enable line charts
library(reshape2)
require(reshape2)
BiosStatsSkiV <- melt(BiosStatsSki, id=(c("IBUId", "FullName")))
BiosStatsShootV <- melt(BiosStatsShoot, id=(c("IBUId", "FullName")))
BiosStatsStandV <- melt(BiosStatsStand, id=(c("IBUId", "FullName")))
BiosStatsProneV <- melt(BiosStatsProne, id=(c("IBUId", "FullName")))
BiosStatsSkiV <- BiosStatsSkiV[order(BiosStatsSkiV$variable ,decreasing = TRUE),]

# Write these file to the working directory
write.csv(Bios, "Bios.csv", row.names = TRUE)
write.csv(BiosStatsSkiV, "BiosStatsSkiV.csv", row.names = TRUE)
write.csv(BiosStatsShootV, "BiosStatsShootV.csv", row.names = TRUE)
write.csv(BiosStatsProneV, "BiosStatsProneV.csv", row.names = TRUE)
write.csv(BiosStatsStandV, "BiosStatsStandV.csv", row.names = TRUE)

# Making some charts
  #Ski stats
#graph for shooting stats for one selected athlete
Testshoot <- BiosStatsShootV[c(6,149,292,435),1:4]
  ggplot(data = Testshoot, mapping = aes(x=variable ,y=value, group=FullName  )) +
    geom_path(color = "#0097c9")+
    #geom_line(color = "#94db18", linetype = "dashed")+
    geom_point()+
    geom_hline(yintercept=0, linetype="dashed", color = "blue", labels("avg."))+
    theme_minimal()

  #Shooting stats
  ggplot(data = BiosStatsShootV, mapping = aes(x=variable ,y=value, group=FullName  )) +
    geom_path(color = "#0097c9")+
    #geom_line(color = "#94db18", linetype = "dashed")+
    geom_point(color = "#0097c9")+
    theme_minimal()

  #Standing shooting stats
  ggplot(data = BiosStatsStandV, mapping = aes(x=variable ,y=value, group=FullName  )) +
    geom_path(color = "#0097c9")+
    #geom_line(color = "#94db18", linetype = "dashed")+
    geom_point(color = "#0097c9")+
    theme_minimal()

  #Prone shooting stats
  ggplot(data = BiosStatsProneV, mapping = aes(x=variable ,y=value, group=FullName  )) +
    geom_path(color = "#0097c9")+
    #geom_line(color = "#94db18", linetype = "dashed")+
    geom_point(color = "#0097c9")+
    theme_minimal()
    
# trying to add the average per variable
aggregate(x = as.integer(BiosStatsSkiV$value), by=list(BiosStatsSkiV$variable), FUN = 'mean', na.rm=TRUE)

# Merging the three shooting stats data frames into one
  # Creating sets per shooting type with only four digits for season to be consistent
  BiosStatsShootVx <- data.frame(BiosStatsShootV[,1:2], str_sub(BiosStatsShootV[,3],-4,-1),BiosStatsShootV[,4])
  BiosStatsStandVx <- data.frame(BiosStatsStandV[,1:2], str_sub(BiosStatsStandV[,3],-4,-1),BiosStatsStandV[,4])
  BiosStatsProneVx <- data.frame(BiosStatsProneV[,1:2], str_sub(BiosStatsProneV[,3],-4,-1),BiosStatsProneV[,4])
  #rename header of third column
  names(BiosStatsShootVx)[3] <- "season"
  names(BiosStatsStandVx)[3] <- "season"
  names(BiosStatsProneVx)[3] <- "season"
  # joining Shoot and Prone, and then join that result to Stand
  ShootingTotalProne <- merge(BiosStatsShootVx,BiosStatsProneVx,by=c("IBUId","season"))
  ShootingTotalProneStand <- merge(ShootingTotalProne,BiosStatsStandVx,by=c("IBUId","season"))
  # Create final file
    # reorder columns
    BiosStatsShootingTtlProStaV <- ShootingTotalProneStand[,c(1,3,2,4,6,8)]
    #rename columns
    names(BiosStatsShootingTtlProStaV)[2] <- "FullName"
    names(BiosStatsShootingTtlProStaV)[4] <- "ShootTTL"
    names(BiosStatsShootingTtlProStaV)[5] <- "ShootPRO"
    names(BiosStatsShootingTtlProStaV)[6] <- "ShootSTA"
    # sort by Full Names and Season
    BiosStatsShootingTtlProStaV <- BiosStatsShootingTtlProStaV[order(BiosStatsShootingTtlProStaV$FullName,BiosStatsShootingTtlProStaV$season),]
    write.csv(BiosStatsShootingTtlProStaV, "BiosStatsShootingTtlProStaV.csv", row.names = TRUE)
    
# some more ggplot testing
# filtering to one athlete
    OneBio <- subset(BiosStatsShootingTtlProStaV, FullName == "Tiril ECKHOFF")
#chart
    ggplot(data = OneBio, aes(x = as.character(season), group=FullName)) + 
      #adding lines
      geom_line(lineend="round",color="#009CD9",aes(y = ShootTTL,colour = "Total", linetype = "solid", size=1.04, alpha=0.4)) + 
      geom_line(lineend="round",color="#D8E935",aes(y = ShootPRO,colour = "Prone", linetype = "solid", size=1.005, alpha=0.4)) +
      geom_line(lineend="round",color="#A2BF15",aes(y = ShootSTA,colour = "Standing", linetype = "solid", size=1.005, alpha=0.4))+
      #adding points
      geom_point(color="#009CD9",aes(y = ShootTTL,colour = "Total", size=1.04, alpha=0.4)) + 
      geom_point(color="#D8E935",aes(y = ShootPRO,colour = "Prone", size=1, alpha=0.4)) +
      geom_point(color="#A2BF15",aes(y = ShootSTA,colour = "Standing", size=1, alpha=0.4))+
      #background them
      theme_minimal()+
      geom_text(aes(x=as.character(season), y=ShootTTL, label=ShootTTL, size=1.02))+
      geom_text(aes(x=as.character(season), y=ShootPRO, label=ShootPRO, size=1.005))+
      geom_text(aes(x=as.character(season), y=ShootSTA, label=ShootSTA, size=1.005))+
      geom_text(color="#009CD9", aes(x=as.character(season), y=ShootTTL, label=ifelse(as.character(season) == "1920", "Total",""), size=1.02, hjust = -0.25))+
      geom_text(color="#D8E935", aes(x=as.character(season), y=ShootPRO, label=ifelse(as.character(season) == "1920", "Prone",""), size=1.008, hjust = -0.25))+
      geom_text(color="#A2BF15", aes(x=as.character(season), y=ShootSTA, label=ifelse(as.character(season) == "1920", "Standing",""), size=1.008, hjust = -0.25))+
      guides(size=FALSE)+
      guides(alpha=FALSE)+
      guides(linetype=FALSE)+
      labs(x= "Season", y = "Shooting percentage")
      
    
    
